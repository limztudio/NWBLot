// limztudio@gmail.com
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#pragma once


#include "global.h"

#include <regex>
#include <unordered_map>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


NWB_COMMON_BEGIN


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


template <typename T>
inline std::unordered_map<std::basic_string<T>, std::basic_string<T>> parseCommandLine(std::basic_string_view<T> input){
    std::basic_regex<T> regex(NWB_TEXT("(\\w+)\\s*=\\s*(?:\"([^\"]*)\"|(\\S+))"));

    std::unordered_map<std::basic_string<T>, std::basic_string<T>> output;
    std::match_results<typename std::basic_string<T>::const_terator> match;

    typename std::basic_string<T>::const_terator itrSearch(input.cbegin());
    while(std::regex_search(itrSearch, input.cend(), match, regex)){
        output[match[1].str()] = match[2].matched ? match[2].str() : match[3].str();
        itrSearch = match.suffix().first;
    }

    return output;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


NWB_COMMON_END


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

