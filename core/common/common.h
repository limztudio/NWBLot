// limztudio@gmail.com
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#pragma once


#include "global.h"

#include <regex>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


NWB_COMMON_BEGIN


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


template <typename T>
inline HashMap<BasicString<T>, BasicString<T>> parseCommandLine(BasicStringView<T> input){
    std::basic_regex<T> regex(
        IsSame_V<T, wchar>
        ? L"(\\w+)\\s*=\\s*(?:\"([^\"]*)\"|(\\S+))"
        :  "(\\w+)\\s*=\\s*(?:\"([^\"]*)\"|(\\S+))"
    );

    HashMap<BasicString<T>, BasicString<T>> output;
    std::match_results<typename BasicString<T>::const_iterator> match;

    typename BasicString<T>::const_iterator itrSearch(input.cbegin());
    while(std::regex_search(itrSearch, input.cend(), match, regex)){
        output[match[1].str()] = match[2].matched ? match[2].str() : match[3].str();
        itrSearch = match.suffix().first;
    }

    return output;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


NWB_COMMON_END


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

